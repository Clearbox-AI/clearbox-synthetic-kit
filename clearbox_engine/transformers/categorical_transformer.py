"""
categorical_transformer.py

This module defines the CategoricalTransformer class, which is a custom scikit-learn transformer
for handling categorical data. It imputes missing values and applies one-hot encoding.

Dependencies:
    - sklearn.base.BaseEstimator
    - sklearn.base.TransformerMixin
    - sklearn.impute.SimpleImputer
    - sklearn.preprocessing.OneHotEncoder
"""

from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder


class CategoricalTransformer(BaseEstimator, TransformerMixin):
    """
    A custom transformer for preprocessing categorical data. It imputes missing values
    using the most frequent value and applies one-hot encoding to the data.

    Attributes:
        imputer (SimpleImputer): Imputer object for handling missing values.
        encoder (OneHotEncoder): OneHotEncoder object for one-hot encoding categorical features.
    """

    def __init__(self) -> None:
        """Initializes the CategoricalTransformer object."""
        pass

    def fit(self, X, y=None):
        """
        Fits the transformer to the data. It imputes missing values using the most frequent value
        and fits the one-hot encoder on the data.

        Args:
            X (array-like): The input data to fit.
            y (array-like, optional): The target values (not used).

        Returns:
            self: The fitted CategoricalTransformer object.
        """
        self.X = X
        data = X.copy().astype(str)

        # Initialize and fit the imputer
        self.imputer = SimpleImputer(strategy="most_frequent", add_indicator=False)
        self.imputer.fit(data)

        # Transform the data using the fitted imputer
        data = self.imputer.transform(data)

        # Initialize and fit the one-hot encoder
        self.encoder = OneHotEncoder(handle_unknown="ignore", sparse_output=False)
        self.encoder.fit(data)

        return self

    def get_feature_names(self):
        """
        Returns the names of the features generated by the one-hot encoder.

        Returns:
            list: A list of feature names.
        """
        return self.encoder.get_feature_names_out()

    def transform(self, X, y=None):
        """
        Transforms the input data by imputing missing values and applying one-hot encoding.

        Args:
            X (array-like): The input data to transform.
            y (array-like, optional): The target values (not used).

        Returns:
            array-like: The transformed data.
        """
        X = X.copy().astype(str)

        # Impute missing values
        X = self.imputer.transform(X)

        # Apply one-hot encoding
        X = self.encoder.transform(X)
        return X

    def inverse_transform(self, X, y=None):
        """
        Transforms the one-hot encoded data back to the original categorical data.

        Args:
            X (array-like): The one-hot encoded data to inverse transform.
            y (array-like, optional): The target values (not used).

        Returns:
            array-like: The original categorical data.
        """
        X = X.copy()

        # Inverse transform the one-hot encoded data
        X = self.encoder.inverse_transform(X)
        return X
